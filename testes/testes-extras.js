import assert from 'node:assert';

import {
  geradorDeTagsDeIdentificacao,
  verificarSePodeSerAdotado,
  calcularConsumoDeRacao,
  decidirTipoDeAtividadePorPorte,
} from '../trabalho.js';

/**
 * Como uma das regras para a entrega da atividade era n√£o alterar o arquivo de testes disponibilizado, por curiosidade e para praticar, criei esses cen√°rios s√≥ para validar as tratativas implementadas üòÖ
 */

describe('Testes de exceptions - geradorDeTagsDeIdentificacao', () => {
  it('QUANDO informar uma string vazia para geradorDeTagsDeIdentificacao, DEVE retornar mensagem de valor inv√°lido', () => {
    const resultado = geradorDeTagsDeIdentificacao("");
    assert.ok(resultado.includes('"" √© inv√°lido. Erro ao gerar a Tag: Oops! Algo de errado n√£o est√° certo: o nome do pet deve ser um texto e n√£o deve ser vazio.'), `Esperado erro de valor inv√°lido, mas recebeu: ${resultado}`);
  });

  it('QUANDO informar null para geradorDeTagsDeIdentificacao, DEVE retornar mensagem de valor inv√°lido', () => {
    const resultado = geradorDeTagsDeIdentificacao(null);
    assert.ok(resultado.includes('"null" √© inv√°lido. Erro ao gerar a Tag: Oops! Algo de errado n√£o est√° certo: o nome do pet deve ser um texto e n√£o deve ser vazio.'), `Esperado erro de valor inv√°lido, mas recebeu: ${resultado}`);
  });

  it('QUANDO informar um n√∫mero para geradorDeTagsDeIdentificacao, DEVE retornar mensagem de valor inv√°lido', () => {
    const resultado = geradorDeTagsDeIdentificacao(4);
    assert.ok(resultado.includes('"4" √© inv√°lido. Erro ao gerar a Tag: Oops! Algo de errado n√£o est√° certo: o nome do pet deve ser um texto e n√£o deve ser vazio.'), `Esperado erro de valor inv√°lido, mas recebeu: ${resultado}`);
  });

  it('QUANDO informar um valor booleano para geradorDeTagsDeIdentificacao, DEVE retornar mensagem de valor inv√°lido', () => {
    const resultado = geradorDeTagsDeIdentificacao(true);
    assert.ok(resultado.includes('"true" √© inv√°lido. Erro ao gerar a Tag: Oops! Algo de errado n√£o est√° certo: o nome do pet deve ser um texto e n√£o deve ser vazio.'), `Esperado erro de valor inv√°lido, mas recebeu: ${resultado}`);
  });

});

describe('Testes de exceptions - calcularConsumoDeRacao', () => {
  it('QUANDO informar peso 0 para calcularConsumoDeRacao, DEVE retornar mensagem de erro espec√≠fica', () => {
    const resultado = calcularConsumoDeRacao('Tatu Halford', '2', 0);
    assert.strictEqual(resultado, 'Error: Voc√™ deve informar um n√∫mero positivo e maior que zero. "0" n√£o √© v√°lido.');
  });

  it('QUANDO informar peso null para calcularConsumoDeRacao, DEVE retornar mensagem de erro espec√≠fica', () => {
    const resultado = calcularConsumoDeRacao('Tatu', '2', null);
    assert.strictEqual(resultado, 'Error: Voc√™ deve informar um n√∫mero positivo e maior que zero. "null" n√£o √© v√°lido.');
  });
});

describe('Testes de exceptions - decidirTipoDeAtividadePorPorte', () => {
  it('QUANDO informar um porte n√£o mapeado para decidirTipoDeAtividadePorPorte, DEVE retornar mensagem padr√£o', () => {
    const resultado = decidirTipoDeAtividadePorPorte('BITEEELO');
    assert.strictEqual(resultado, 'voc√™ deve informar se o pet tem porte pequeno, m√©dio ou grande.');
  });

  it('QUANDO informar null para decidirTipoDeAtividadePorPorte, DEVE retornar mensagem de erro', () => {
    const resultado = decidirTipoDeAtividadePorPorte(null);
    assert.strictEqual(resultado, 'Error: Porte inv√°lido: null');
  });
});

describe('Testes de exceptions - verificarSePodeSerAdotado', () => {
  it('QUANDO informar idade negativa para verificarSePodeSerAdotado, DEVE retornar mensagem de erro', () => {
    const resultado = verificarSePodeSerAdotado(-1, 'pequeno');
    assert.strictEqual(resultado, 'N√£o foi poss√≠vel identificar se o pet pode ser adotado. "-1" n√£o √© uma idade v√°lida.');
  });

  it('QUANDO informar porte vazio para verificarSePodeSerAdotado, DEVE retornar mensagem de erro', () => {
    const resultado = verificarSePodeSerAdotado(1, '');
    assert.strictEqual(resultado, 'N√£o foi poss√≠vel identificar se o pet pode ser adotado. "" n√£o √© um porte v√°lido.');
  });
});